import React, { useState, useEffect } from 'react';
import {
  Box, Button, Grid, Paper, TextField, Typography, Alert, Snackbar, CircularProgress,
  Accordion, AccordionSummary, AccordionDetails, List, ListItem, ListItemIcon, ListItemText
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import LinkIcon from '@mui/icons-material/Link';
import { useNavigate } from 'react-router-dom';

interface Settings {
  fnsApiKey: string;
  fnsApiUsage: string;
}

const SettingsPage: React.FC = () => {
  const navigate = useNavigate();
  const [settings, setSettings] = useState<Settings>({ fnsApiKey: '', fnsApiUsage: '' });
  const [showSuccess, setShowSuccess] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');
  const [showError, setShowError] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingUsage, setIsLoadingUsage] = useState(false);
  const [usageInfo, setUsageInfo] = useState<string | null>(null);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å backend
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      const response = await fetch('/api/settings');
      if (response.ok) {
        const data = await response.json();
        setSettings({
          fnsApiKey: data.fnsApiKey || '',
          fnsApiUsage: data.fnsApiUsage || '',
        });
      } else {
        setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        setShowError(true);
      }
    } catch (error) {
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      setShowError(true);
    }
  };

  const handleSave = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/settings/fns-api-key', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ apiKey: settings.fnsApiKey }),
      });
      
      if (response.ok) {
        setSuccessMessage('API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        setShowSuccess(true);
        await loadSettings(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      } else {
        const errorText = await response.text();
        setErrorMessage(errorText);
        setShowError(true);
      }
    } catch (error) {
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      setShowError(true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestApi = async () => {
    if (!settings.fnsApiKey || !settings.fnsApiKey.trim()) {
      setErrorMessage('–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      setShowError(true);
      return;
    }

    setIsLoading(true);
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ò–ù–ù (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–ù–ù –Ø–Ω–¥–µ–∫—Å–∞)
      const response = await fetch(`https://api-fns.ru/api/search?q=7736207543&key=${settings.fnsApiKey}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.items && data.items.length > 0) {
        setSuccessMessage('API-–∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        setShowSuccess(true);
      } else {
        setErrorMessage('API-–∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á.');
        setShowError(true);
      }
    } catch (error) {
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞.');
      setShowError(true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCheckUsage = async () => {
    if (!settings.fnsApiKey || !settings.fnsApiKey.trim()) {
      setErrorMessage('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API-–∫–ª—é—á');
      setShowError(true);
      return;
    }

    setIsLoadingUsage(true);
    setUsageInfo(null);
    try {
      const response = await fetch('/api/settings/fns-api-usage');
      
      if (response.ok) {
        const usage = await response.text();
        setUsageInfo(usage);
      } else {
        const errorText = await response.text();
        setErrorMessage(errorText);
        setShowError(true);
        setUsageInfo('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
      }
    } catch (error) {
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–µ');
      setShowError(true);
      setUsageInfo('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
    } finally {
      setIsLoadingUsage(false);
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</Typography>
      
      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API-–∫–ª—é—á–∞ */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" gutterBottom>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á –§–ù–°</Typography>
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ò–ù–ù –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API-–∫–ª—é—á –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –§–ù–°.
        </Typography>
        
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <List>
              <ListItem>
                <ListItemIcon>
                  <CheckCircleIcon color="primary" />
                </ListItemIcon>
                <ListItemText 
                  primary="1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç API-–§–ù–°"
                  secondary={
                    <>
                      –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç{' '}
                      <a href="https://api-fns.ru/" target="_blank" rel="noopener noreferrer" style={{ color: '#1976d2' }}>
                        api-fns.ru
                      </a>
                      {' '}–≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                    </>
                  }
                />
              </ListItem>
              
              <ListItem>
                <ListItemIcon>
                  <CheckCircleIcon color="primary" />
                </ListItemIcon>
                <ListItemText 
                  primary="2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ"
                  secondary="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                />
              </ListItem>
              
              <ListItem>
                <ListItemIcon>
                  <CheckCircleIcon color="primary" />
                </ListItemIcon>
                <ListItemText 
                  primary="3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email"
                  secondary="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                />
              </ListItem>
              
              <ListItem>
                <ListItemIcon>
                  <CheckCircleIcon color="primary" />
                </ListItemIcon>
                <ListItemText 
                  primary="4. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
                  secondary="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
                />
              </ListItem>
              
              <ListItem>
                <ListItemIcon>
                  <CheckCircleIcon color="primary" />
                </ListItemIcon>
                <ListItemText 
                  primary="5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞"
                  secondary="API-–∫–ª—é—á –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"
                />
              </ListItem>
              
              <ListItem>
                <ListItemIcon>
                  <CheckCircleIcon color="primary" />
                </ListItemIcon>
                <ListItemText 
                  primary="6. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø–æ–ª–µ –Ω–∏–∂–µ"
                  secondary="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏–∑ –ø–∏—Å—å–º–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ 'API-–∫–ª—é—á –§–ù–°' –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                />
              </ListItem>
            </List>
            
            <Alert severity="info" sx={{ mt: 2 }}>
              <Typography variant="body2">
                <strong>–í–∞–∂–Ω–æ:</strong> –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤–∫–ª—é—á–∞–µ—Ç 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü.
                –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç—ã.
              </Typography>
            </Alert>
          </AccordionDetails>
        </Accordion>
      </Paper>
      
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" gutterBottom>API –§–ù–°</Typography>
        
        <Grid container spacing={2}>
          <Grid item xs={12} md={8}>
            <TextField
              label="API-–∫–ª—é—á –§–ù–°"
              fullWidth
              type="password"
              value={settings.fnsApiKey}
              onChange={(e) => setSettings({ ...settings, fnsApiKey: e.target.value })}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –æ—Ç api-fns.ru"
              helperText="–ö–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <Button
              variant="outlined"
              onClick={handleTestApi}
              disabled={isLoading}
              sx={{ height: '56px', width: '100%' }}
            >
              {isLoading ? <CircularProgress size={20} /> : '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API'}
            </Button>
          </Grid>
        </Grid>

        {settings.fnsApiUsage && (
          <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
            <Typography variant="subtitle2" gutterBottom>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:</Typography>
            <Typography variant="body2">{settings.fnsApiUsage}</Typography>
          </Box>
        )}
        
        <Box sx={{ mt: 3, display: 'flex', alignItems: 'center', gap: 2 }}>
          {isLoadingUsage && <CircularProgress size={24} />}
          {usageInfo && (
              <Typography variant="body2" color="text.secondary">{usageInfo}</Typography>
          )}
        </Box>
        
        <Box sx={{ mt: 3 }}>
          <Button 
            variant="contained" 
            onClick={handleSave} 
            disabled={isLoading}
            sx={{ mr: 1 }}
          >
            {isLoading ? <CircularProgress size={24} /> : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
          </Button>
          <Button variant="outlined" onClick={() => navigate('/counterparties')}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º
          </Button>
        </Box>
      </Paper>

      <Snackbar
        open={showSuccess}
        autoHideDuration={4000}
        onClose={() => setShowSuccess(false)}
      >
        <Alert onClose={() => setShowSuccess(false)} severity="success">
          {successMessage}
        </Alert>
      </Snackbar>

      <Snackbar
        open={showError}
        autoHideDuration={6000}
        onClose={() => setShowError(false)}
      >
        <Alert onClose={() => setShowError(false)} severity="error">
          {errorMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default SettingsPage; 